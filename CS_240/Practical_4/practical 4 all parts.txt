

p4a.c



----------------------------------------------------


P4b.c


#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
int main() {
int pid;
pid = fork();
if (pid == 0) {
printf("I am the child\n");
sleep(5); /* Terminate */
}
else {
printf("I am the parent\n");
}
printf("Which process am I?\n");
}

----------------------------------------------



p4c.c


#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>

int main(int argc, char *argv[])
{
   int pid;

   pid = fork(); /* create a child process */

/* Two processes now exist executing copies of this code (unless fork failed) but with different pid values */

   if (pid < 0) {
      fprintf(stderr, "Fork failed");
      exit(-1);  /* program ends */
   }

   else if (pid == 0) { /* child process */
      execlp("/bin/ls", "ls", NULL);
   }
   else {  /* Parent process */
/* Wait suspends execution of current process until a  
   child has ended. */
      wait(NULL);
      printf("Child %d complete\n", pid);
      exit(0); /* parent ends */
   }
}


-------------------------------


p4d.c


#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>

int main(int argc, char *argv[])
{
   int pid;

   pid = fork(); /* create a child process */

/* Two processes now exist executing copies of this code (unless fork failed) but with different pid values */

   if (pid < 0) {
      fprintf(stderr, "Fork failed");
      exit(-1);  /* program ends */
   }

   else if (pid == 0) { /* child process */
      execlp("/bin/ps", "ps", NULL);
   }
   else {  /* Parent process */
/* Wait suspends execution of current process until a  
   child has ended. */
      wait(NULL);
      printf("Child %d complete\n", pid);
      exit(0); /* parent ends */
   }
}


---------------------------------------


p4e.c


#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

int main() {
int fdptr[2], n, buffersize=5;
char strbuff[buffersize+1];   
char message[] = "Welcome to Unix pipes";

pipe(fdptr);  /* Create a new pipe */

/* Let's see what descriptors were allocated 
   for the read and write ends of the pipe*/
printf("read descriptor = %d, write descriptor = %d, buffersize = %d \n", fdptr[0], fdptr[1], buffersize);

/* This process writes a string of chars into the pipe */
write(fdptr[1], message, strlen(message));

/* Let's read the data written to the pipe 
   in blocks of buffersize and write it to standard output */
do {
   n = read(fdptr[0], strbuff, buffersize);
   /* Add null character to end of string to 
      terminate string properly for printf */
   strbuff[n] = 0;
      printf (" Read =%s\n",strbuff);
   } while (n == buffersize);
}


--------------------------------------------------


P4f.c


#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

int main() {
int fdptr[2], n, buffersize=10;
char strbuff[buffersize+1];   
char message[] = "Welcome to Unix pipes";

pipe(fdptr);  /* Create a new pipe */

/* Let's see what descriptors were allocated 
   for the read and write ends of the pipe*/
printf("read descriptor = %d, write descriptor = %d, buffersize = %d \n", fdptr[0], fdptr[1], buffersize);

/* This process writes a string of chars into the pipe */
write(fdptr[1], message, strlen(message));

/* Let's read the data written to the pipe 
   in blocks of buffersize and write it to standard output */
do {
   n = read(fdptr[0], strbuff, buffersize);
   /* Add null character to end of string to 
      terminate string properly for printf */
   strbuff[n] = 0;
      printf (" Read =%s\n",strbuff);
   } while (n == buffersize);
}


------------------------------------

P4g.c



#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

int main() {
int fdptr[2], n, buffersize=21;
char strbuff[buffersize+1];   
char message[] = "Welcome to Unix pipes";
int pid;

/* Create a new pipe */
pipe(fdptr);
/* fork a process */
pid = fork();

if (pid == 0) { 
    while (true) {
       /* read from the pipe into strbuff */
	   n = read(fdptr[0], strbuff, buffersize);
       strbuff[n] = 0;
       printf("Child read: %s\n", strbuff);
       /* sleep for 5 seconds */
		sleep(5);
       }
   }
else {   
   while (true) {
      printf("Parent writing: %s\n", message);
      /* write message into the pipe */
		write(fdptr[1], message, strlen(message));
      /* sleep for 5 seconds */
		sleep(5);
      }
   }

}


-----------------------------------------------


p4h.c


#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

int main() {

int fdptr[2], n, buffersize=21;
char strbuff[buffersize+1];   
char message[] = "Welcome to Unix pipes";
int pid;


pipe(fdptr);  /* Create a new pipe */

pid = fork();

if (pid == 0) { 
    close(fdptr[1]); /* Close the write end in child */
    while (true) {
       n=read(fdptr[0], strbuff, buffersize);
       strbuff[n]=0;
       printf("Child read: %s\n", strbuff);
       sleep(5);
       }
   }
else {   
   close(fdptr[0]); /* Close the read end in parent */
   while (true) {
      printf("Parent writing: %s\n", message);
      write(fdptr[1], message, strlen(message));
      sleep(5);
      }
   }
}




